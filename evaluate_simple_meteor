#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
import sys
 
def word_matches(h, ref):
    return sum(1 for w in h if w in ref)
 
def main():

    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    parser.add_argument('-a', '--alpha', default=0.1, type=float,
                        help='Alpha value')

    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    # compare-with-human-evaluation only evaluate first half
    # but for test later, this code should work whole data set
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        rset = set(ref)  # finding intersecting elements. Does, set will work.
        #if len(ref) != len(rset):
            #print('ref', ref)
            #sprint('rset', rset)
        h1_match = word_matches(h1, rset)
        h2_match = word_matches(h2, rset)

        #alpha = 0.1
        ref_len = len(ref)  # reference length need to be before set operation.
        alpha = opts.alpha

        h1_inter = word_matches(h1, rset)
        if h1_inter == 0:  # if there is no match at all, then meteor score will be zero
            h1_meteor = 0
        else:
            h1_len = len(h1)
            h1_pc = float(h1_inter) / float(h1_len)
            h1_rc = float(h1_inter) / float(ref_len)
            h1_meteor = (h1_pc * h1_rc) / ((1 - alpha)*h1_rc + alpha*h1_pc)
        """
        try:
            h1_meteor = (h1_pc*h1_rc) / ((1-alpha)*h1_rc + alpha*h1_pc)
        except ZeroDivisionError:
            print('h1_inter', h1_inter)
            print('h1_len', h1_len)
            print('ref_len', ref_len)
            print('h1_pc', h1_pc)
            print('h1_rc', h1_rc)
            print('alpha',alpha)
        """

        h2_inter = word_matches(h2, rset)
        if h2_inter == 0:
            h2_meteor = 0
        else:
            h2_len = len(h2)
            h2_pc = float(h2_inter) / float(h2_len)
            h2_rc = float(h2_inter) / float(ref_len)
            h2_meteor = (h2_pc * h2_rc) / ((1 - alpha)*h2_rc + alpha*h2_pc)

        print(1 if h1_meteor > h2_meteor else  # \begin{cases}
              (0 if h1_meteor == h2_meteor
               else -1))  # \end{cases}

        """
        print(1 if h1_match > h2_match else # \begin{cases}
                (0 if h1_match == h2_match
                    else -1)) # \end{cases}
        """
 
# convention to allow import of this file as a module
if __name__ == '__main__':

    main()
